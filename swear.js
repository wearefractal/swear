// Generated by CoffeeScript 1.3.3
(function() {
  var swear,
    __slice = [].slice;

  swear = function() {
    var p;
    p = {
      efns: [],
      fns: [],
      completed: false,
      wrap: function() {
        return function() {
          var d, e;
          e = arguments[0], d = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
          if (e != null) {
            return p.abort(e);
          }
          return p.resolve.apply(p, d);
        };
      },
      resolve: function() {
        var cb, completed, val, _i, _len, _ref;
        val = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        p.val = val;
        completed = true;
        _ref = p.fns;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cb = _ref[_i];
          cb.apply(null, val);
        }
        return p;
      },
      abort: function(e) {
        var cb, completed, _i, _len, _ref;
        p.err = e;
        completed = true;
        _ref = p.efns;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cb = _ref[_i];
          cb(e);
        }
        return p;
      },
      fail: function(cb) {
        if (p.err) {
          cb(p.err);
        } else {
          p.efns.push(cb);
        }
        return p;
      },
      when: function(cb) {
        if (p.val) {
          cb.apply(null, p.val);
        } else {
          p.fns.push(cb);
        }
        return p;
      }
    };
    return p;
  };

  swear.join = function() {
    var arr, handle, n, p, promises, _i, _len;
    promises = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    arr = [];
    n = swear();
    handle = function() {
      var d, next;
      d = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      next = promises.pop();
      if (next == null) {
        return n.resolve.apply(n, arr);
      }
      return next.when(function() {
        var a;
        a = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        arr.push(a);
        return handle.apply(null, a);
      });
    };
    for (_i = 0, _len = promises.length; _i < _len; _i++) {
      p = promises[_i];
      p.fail(n.abort);
    }
    handle();
    return n;
  };

  if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
    module.exports = swear;
  } else {
    window.swear = swear;
  }

}).call(this);
